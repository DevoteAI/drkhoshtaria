import * as pdfjsLib from 'pdfjs-dist';
import { shouldUseOCR, extractTextFromPdfWithOCR, estimateOcrProcessingTime } from './ocrExtractor';

// Set the worker source to use the local worker file
pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.js';

export interface PdfTextExtractionResult {
  text: string;
  pageCount: number;
  success: boolean;
  error?: string;
  usedOCR?: boolean;
  ocrConfidence?: number;
  processingTime?: number;
}

/**
 * Extract text content from a PDF file using PDF.js
 * Properly handles Georgian text and other Unicode characters
 */
export async function extractTextFromPdf(
  file: File, 
  onProgress?: (progress: { 
    stage: 'analyzing' | 'extracting' | 'ocr' | 'complete';
    stageDescription: string;
    percentage?: number;
    estimatedTimeRemaining?: string;
    currentPage?: number;
    totalPages?: number;
    method?: 'standard' | 'ocr';
  }) => void
): Promise<PdfTextExtractionResult> {
  try {
    console.log('üìÑ Starting PDF text extraction:', {
      fileName: file.name,
      fileSize: file.size,
      fileType: file.type
    });

    // Initial progress
    if (onProgress) {
      onProgress({
        stage: 'analyzing',
        stageDescription: 'Loading PDF document...',
        percentage: 5
      });
    }

    // Convert file to ArrayBuffer
    const arrayBuffer = await file.arrayBuffer();
    
    // Load the PDF document with enhanced options for Georgian text and Sylfaen font
    const pdf = await pdfjsLib.getDocument({ 
      data: arrayBuffer,
      useSystemFonts: true, // Better support for Georgian fonts including Sylfaen
      disableFontFace: false, // Allow custom font faces (important for Sylfaen)
      fontExtraProperties: true, // Extract additional font properties for better text mapping
      verbosity: 0, // Reduce console noise
      // Enhanced Unicode and font support for Georgian/Sylfaen
      cMapPacked: true,
      cMapUrl: '/cmaps/',
      disableRange: false, // Allow full font range loading for Unicode
      disableStream: false, // Enable streaming for better font loading
      disableAutoFetch: false, // Allow automatic font fetching
      maxImageSize: 16777216, // 16MB max image size
      isOffscreenCanvasSupported: false // Avoid canvas issues with fonts
    }).promise;

    console.log('üìñ PDF loaded successfully:', {
      pageCount: pdf.numPages,
      fileName: file.name,
      fingerprint: pdf.fingerprints?.[0] || 'unknown'
    });

    // Progress update after loading
    if (onProgress) {
      onProgress({
        stage: 'extracting',
        stageDescription: `Extracting text from ${pdf.numPages} page${pdf.numPages > 1 ? 's' : ''}...`,
        percentage: 15,
        totalPages: pdf.numPages
      });
    }

    let fullText = '';
    let totalItemsProcessed = 0;
    let totalItemsWithText = 0;
    
    // Extract text from each page
    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
      try {
        // Update progress for each page
        if (onProgress) {
          const pageProgress = 15 + (pageNum / pdf.numPages) * 60; // 15% to 75%
          onProgress({
            stage: 'extracting',
            stageDescription: `Processing page ${pageNum} of ${pdf.numPages}...`,
            percentage: Math.round(pageProgress),
            currentPage: pageNum,
            totalPages: pdf.numPages,
            method: 'standard'
          });
        }

        const page = await pdf.getPage(pageNum);
        const textContent = await page.getTextContent({
          includeMarkedContent: true // Include semantic structure for better Georgian text extraction
        });
        
        console.log(`üìù Page ${pageNum} text content analysis:`, {
          pageNum,
          totalItems: textContent.items.length,
          itemTypes: textContent.items.map(item => ({
            hasStr: 'str' in item,
            strLength: 'str' in item ? item.str?.length || 0 : 0,
            hasTransform: 'transform' in item,
            hasDir: 'dir' in item
          }))
        });
        
        // Process text items with proper Georgian character handling
        const pageTextItems: string[] = [];
        
        for (const item of textContent.items) {
          totalItemsProcessed++;
          
          if ('str' in item && item.str) {
            let text = item.str;
            
            // Log original text for debugging
            if (text.trim()) {
              console.log(`üîç Found text item:`, {
                pageNum,
                originalText: text.substring(0, 100),
                textLength: text.length,
                hasUnicode: /[\u0080-\uFFFF]/.test(text),
                hasGeorgian: /[\u10A0-\u10FF]/.test(text),
                hasRussian: /[\u0400-\u04FF]/.test(text),
                hasEncodedChars: /[√Ä-√ø]/.test(text)
              });
            }
            
            // Clean up the text (don't apply encoding fix yet - do it on combined text)
            text = text.trim();
            
            if (text) {
              pageTextItems.push(text);
              totalItemsWithText++;
            }
          } else {
            // Log items without text for debugging
            console.log(`‚ÑπÔ∏è Non-text item found:`, {
              pageNum,
              itemType: typeof item,
              hasStr: 'str' in item,
              keys: Object.keys(item)
            });
          }
        }
        
        // Combine text items with appropriate spacing
        let pageText = pageTextItems.join(' ').trim();
        
        // Apply encoding fix to the combined page text (this is where Georgian patterns will be detected)
        if (pageText) {
          console.log(`üîÑ Applying encoding fix to combined page ${pageNum} text...`);
          const fixedPageText = fixMultiLanguageEncoding(pageText);
          if (fixedPageText !== pageText) {
            console.log(`‚úÖ Page ${pageNum} text encoding fixed:`, {
              originalLength: pageText.length,
              fixedLength: fixedPageText.length,
              originalPreview: pageText.substring(0, 100),
              fixedPreview: fixedPageText.substring(0, 100)
            });
            pageText = fixedPageText;
          } else {
            console.log(`‚ÑπÔ∏è Page ${pageNum} text did not need encoding fixes`);
          }
          
          fullText += `\n\n--- Page ${pageNum} ---\n${pageText}`;
        }
        
        console.log(`üìù Page ${pageNum} extraction summary:`, {
          pageNum,
          pageTextLength: pageText.length,
          itemsProcessed: textContent.items.length,
          itemsWithText: pageTextItems.length,
          hasGeorgianChars: /[\u10A0-\u10FF]/.test(pageText),
          hasRussianChars: /[\u0400-\u04FF]/.test(pageText),
          hasEncodedChars: /[√Ä-√ø]/.test(pageText),
          preview: pageText.substring(0, 100) + '...'
        });
        
      } catch (pageError) {
        console.warn(`‚ö†Ô∏è Error extracting text from page ${pageNum}:`, {
          pageNum,
          error: pageError,
          message: pageError instanceof Error ? pageError.message : 'Unknown page error'
        });
        // Continue with other pages even if one fails
      }
    }

    // Clean up the extracted text
    const cleanedText = fullText
      .replace(/\n\s*\n\s*\n/g, '\n\n') // Remove excessive line breaks
      .replace(/\s+/g, ' ') // Normalize whitespace
      .trim();

    const result: PdfTextExtractionResult = {
      text: cleanedText,
      pageCount: pdf.numPages,
      success: true
    };

    // Final progress update for standard extraction
    if (onProgress) {
      onProgress({
        stage: 'complete',
        stageDescription: cleanedText.length > 0 ? 'Text extraction completed' : 'No text content found',
        percentage: cleanedText.length > 0 ? 85 : 75, // Leave room for OCR if needed
        method: 'standard'
      });
    }

    console.log('‚úÖ PDF text extraction completed:', {
      fileName: file.name,
      totalTextLength: cleanedText.length,
      pageCount: pdf.numPages,
      totalItemsProcessed,
      totalItemsWithText,
      extractionEfficiency: totalItemsProcessed > 0 ? (totalItemsWithText / totalItemsProcessed * 100).toFixed(1) + '%' : '0%',
      hasGeorgianChars: /[\u10A0-\u10FF]/.test(cleanedText),
      hasRussianChars: /[\u0400-\u04FF]/.test(cleanedText),
      hasEncodedChars: /[√Ä-√ø]/.test(cleanedText),
      preview: cleanedText.substring(0, 200) + '...',
      isEmpty: cleanedText.length === 0,
      // Enhanced debugging for character encoding issues
      finalTextSample: cleanedText.substring(0, 500),
      remainingLatinExtended: (cleanedText.match(/[√Ä-√ø]/g) || []).slice(0, 20),
      georgianUnicodeDetected: /[\u10A0-\u10FF]/.test(cleanedText),
      latinExtendedStillPresent: /[√Ä-√ø]/.test(cleanedText)
    });

    // If no text was extracted, try alternative extraction methods
    if (cleanedText.length === 0 && pdf.numPages > 0) {
      console.warn('üîç No text extracted with standard method, analyzing PDF structure...');
      
      let hasTextOperators = false;
      
      try {
        // Try to get more detailed page analysis
        const firstPage = await pdf.getPage(1);
        const operatorList = await firstPage.getOperatorList();
        
        hasTextOperators = operatorList.fnArray.some(op => 
          typeof op === 'number' && (
            op === 49 || // showText
            op === 50 || // showSpacedText  
            op === 51 || // nextLineShowText
            op === 52    // nextLineSetSpacingShowText
          )
        );
        
        console.log('üî¨ PDF structure analysis:', {
          fileName: file.name,
          operatorCount: operatorList.fnArray.length,
          operators: operatorList.fnArray.slice(0, 10), // First 10 operators
          hasTextOperators
        });
        
      } catch (analysisError) {
        console.warn('‚ö†Ô∏è Could not analyze PDF structure:', analysisError);
      }
      
      // Check if we should try OCR
      if (shouldUseOCR({ text: cleanedText, pageCount: pdf.numPages, success: true }, hasTextOperators)) {
        console.log('üîç PDF appears to be image-based, attempting OCR extraction...');
        
        const estimatedTime = estimateOcrProcessingTime(file.size, pdf.numPages);
        console.log(`‚è±Ô∏è Estimated OCR processing time: ~${Math.round(estimatedTime / 1000)} seconds`);
        
        // Progress update for OCR start
        if (onProgress) {
          onProgress({
            stage: 'ocr',
            stageDescription: 'No standard text found. Starting OCR analysis...',
            percentage: 80,
            estimatedTimeRemaining: `~${Math.round(estimatedTime / 1000)}s`,
            method: 'ocr'
          });
        }
        
        try {
          const ocrResult = await extractTextFromPdfWithOCR(file, (ocrProgress) => {
            if (onProgress) {
              onProgress({
                stage: 'ocr',
                stageDescription: ocrProgress.stageDescription,
                percentage: ocrProgress.percentage,
                currentPage: ocrProgress.currentPage,
                totalPages: ocrProgress.totalPages,
                estimatedTimeRemaining: ocrProgress.timeEstimate ? `${ocrProgress.timeEstimate}s` : undefined,
                method: 'ocr'
              });
            }
          });
          
          if (ocrResult.success && ocrResult.text.trim()) {
            console.log('üéØ OCR extraction successful, using OCR results');
            
            // Final progress update
            if (onProgress) {
              onProgress({
                stage: 'complete',
                stageDescription: 'OCR text extraction completed',
                percentage: 100,
                method: 'ocr'
              });
            }
            
            return {
              text: ocrResult.text,
              pageCount: ocrResult.pageCount,
              success: true,
              usedOCR: true,
              ocrConfidence: ocrResult.confidence,
              processingTime: ocrResult.processingTime
            };
          } else {
            console.warn('‚ö†Ô∏è OCR extraction failed or found no text:', ocrResult.error);
          }
          
        } catch (ocrError) {
          console.error('‚ùå OCR extraction error:', ocrError);
        }
      }
    }

    return result;

  } catch (error) {
    console.error('‚ùå PDF text extraction failed:', {
      fileName: file.name,
      error,
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    });

    return {
      text: '',
      pageCount: 0,
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}

/**
 * Global debug function for testing Georgian mappings
 */
(window as any).debugGeorgianMapping = function(text: string) {
  console.log('üîçüîçüîç MANUAL GEORGIAN MAPPING DEBUG üîçüîçüîç');
  
  const testMappings = {
    '·Éö·É•·Éù·Éó·Éû·É°·Éù·Éó·Éû·Éó': '·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°',
    '·É°·Éê·Éï·Éê·Éû·Éê·É°·Éì·Éù': '·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù',  
    '·É¢·Éî·Éû·Éù·Éö·Éî·Éû·Éó·Éê': '·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê',
    '·Éó·Éê·Éï·Éó·É°': '·Éó·Éê·Éï·Éò·É°',
    '·Éë·Éó·Éû·Éê·Éû·Éó·Éî·Éû·Éê·Éö·É°·Éû·Éó': '·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò',
    '·Éñ·Éù·Éö·Éê': '·Éñ·Éù·Éõ·Éê',
    '·Éí·Éê·Éû·É•·Éî·Éö·Éù·É¨·Éî·Éû·Éó·Éö·Éù·Éë·Éê': '·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê',
    '·Éö·É°·É™·Éö·Éó·É°': '·Éõ·É£·É™·Éö·Éò·É°',
    '·Éë·Éê·Éû·É•·Éê·É§·Éó·É°': '·Éë·Éê·É†·É´·Éê·Éß·Éò·É°',
    '·É•·Éï·Éö·Éó·É°': '·É´·Éï·Éö·Éò·É°',
    '·É°·Éó·Éí·Éû·É•·Éî': '·É°·Éò·Éí·É†·É´·Éî'
  };
  
  let fixed = text;
  let applied = 0;
  
  for (const [incorrect, correct] of Object.entries(testMappings)) {
    if (fixed.includes(incorrect)) {
      fixed = fixed.replace(new RegExp(incorrect, 'g'), correct);
      applied++;
      console.log(`üéØ Mapped: ${incorrect} ‚Üí ${correct}`);
    }
  }
  
  console.log('üîç Manual mapping results:', {
    originalLength: text.length,
    fixedLength: fixed.length,
    mappingsApplied: applied,
    changed: text !== fixed,
    originalSample: text.substring(0, 200),
    fixedSample: fixed.substring(0, 200)
  });
  
  return fixed;
};

/**
 * Fix common character encoding issues for Georgian, Russian, and English text
 * Enhanced with comprehensive Sylfaen font support
 */
function fixMultiLanguageEncoding(text: string): string {
  // Document-specific Sylfaen Georgian character mappings
  // These are CORRECTED mappings based on actual word-by-word document analysis
  const sylfaenGeorgianMappings: { [key: string]: string } = {
    // CORRECT character mappings derived from actual document comparison:
    // From "·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°" ‚Üí "·Éú·É´·Éü·Éë·Éô·É¢·Éü·Éë·Éô·É£" analysis
    // From "·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù" ‚Üí "·É£·Éê·Éï·Éê·É¢·Éê·É¶·Éì·Éü" analysis  
    // From "·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê" ‚Üí "·Éß·Éî·É§·Éü·Éú·Éî·É§·É¢·Éô·Éê" analysis
    // And other word pairs
    
    // Characters that stay the same
    '·Éê': '·Éê', '·Éë': '·Éë', '·Éí': '·Éí', '·Éì': '·Éì', '·Éî': '·Éî', '·Éï': '·Éï', '·Éñ': '·Éñ',
    
    // Characters that change (based on actual document analysis)
    '·Éú': '·Éõ',   // ·Éõ‚Üí·Éú (reversed for decoding)
    '·É´': '·É®',   // ·É®‚Üí·É´ (reversed for decoding)
    '·Éü': '·Éù',   // ·Éù‚Üí·Éü (reversed for decoding)
    '·Éô': '·Éò',   // ·Éò‚Üí·Éô (reversed for decoding)
    '·É¢': '·É†',   // ·É†‚Üí·É¢ (reversed for decoding)
    '·É£': '·É°',   // ·É°‚Üí·É£ (reversed for decoding)
    '·É¶': '·É£',   // ·É£‚Üí·É¶ (reversed for decoding)
    '·Éò': '·Éó',   // ·Éó‚Üí·Éò (reversed for decoding)
    '·Éõ': '·Éö',   // ·Éö‚Üí·Éõ (reversed for decoding)
    '·É†': '·Éû',   // ·Éû‚Üí·É† (reversed for decoding)
    '·É§': '·É¢',   // ·É¢‚Üí·É§ (reversed for decoding)
    '·Éß': '·É§',   // ·É§‚Üí·Éß (reversed for decoding)
    '·É®': '·É•',   // ·É•‚Üí·É® (reversed for decoding)
    '·É©': '·É¶',   // ·É¶‚Üí·É© (reversed for decoding)
    '·ÉØ': '·É¨',   // ·É¨‚Üí·ÉØ (reversed for decoding)
    
    // Additional mappings that may be needed (extrapolated)
    '·É™': '·É™', '·ÉÆ': '·ÉÆ', '·É≠': '·É≠', '·É∞': '·É∞'
  };
  
  // Latin Extended to Georgian character mappings (for text like √å√õ√è√Å√â√Ä√í√è√Å√â√ì)
  // Based on the actual Latin Extended patterns in the extracted text
  const latinExtendedToGeorgianMappings: { [key: string]: string } = {
    // Uppercase Latin Extended ‚Üí Georgian mappings
    '√Ä': '·Éê', '√Å': '·Éë', '√Ç': '·Éí', '√É': '·Éì', '√Ñ': '·Éî', '√Ö': '·Éï', '√Ü': '·Éñ', '√á': '·Éó',
    '√à': '·Éò', '√â': '·Éô', '√ä': '·Éö', '√ã': '·Éõ', '√å': '·Éú', '√ç': '·Éù', '√é': '·Éû', '√è': '·Éü',
    '√ê': '·É†', '√ë': '·É°', '√í': '·É¢', '√ì': '·É£', '√î': '·É§', '√ï': '·É•', '√ñ': '·É¶', '√ó': '·Éß',
    '√ò': '·É®', '√ô': '·É©', '√ö': '·É™', '√õ': '·É´', '√ú': '·É¨', '√ù': '·É≠', '√û': '·ÉÆ', '√ü': '·ÉØ',
    
    // Lowercase Latin Extended ‚Üí Georgian mappings
    '√†': '·Éê', '√°': '·Éë', '√¢': '·Éí', '√£': '·Éì', '√§': '·Éî', '√•': '·Éï', '√¶': '·Éñ', '√ß': '·Éó',
    '√®': '·Éò', '√©': '·Éô', '√™': '·Éö', '√´': '·Éõ', '√¨': '·Éú', '√≠': '·Éù', '√Æ': '·Éû', '√Ø': '·Éü',
    '√∞': '·É†', '√±': '·É°', '√≤': '·É¢', '√≥': '·É£', '√¥': '·É§', '√µ': '·É•', '√∂': '·É¶', '√∑': '·Éß',
    '√∏': '·É®', '√π': '·É©', '√∫': '·É™', '√ª': '·É´', '√º': '·É¨', '√Ω': '·É≠', '√æ': '·ÉÆ', '√ø': '·ÉØ'
  };
  
  // Comprehensive word mappings for medical document terms
  // Based on exact word-by-word comparison with the original document
  const specificWordMappings: { [key: string]: string } = {
    // PRIMARY MEDICAL TERMS (highest priority)
    '·Éú·É´·Éü·Éë·Éô·Éê·É¢·Éü·Éë·Éô·É£': '·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°',     // pregnancy
    '·É£·Éê·Éï·Éê·É¢·Éê·É¶·Éì·Éü': '·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù',         // estimated/presumed  
    '·Éß·Éî·É§·Éü·Éú·Éî·É§·É¢·Éô·Éê': '·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê',      // fetometry
    '·Éò·Éê·Éï·Éô·É£': '·Éó·Éê·Éï·Éò·É°',                 // head (genitive)
    '·Éë·Éô·É†·Éê·É¢·Éô·Éî·É§·Éê·Éõ·É¶·É¢·Éô': '·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò', // biparietal
    '·Éñ·Éü·Éú·Éê': '·Éñ·Éù·Éõ·Éê',                  // measurement
    '·Éí·Éê·É¢·É´·Éî·Éú·Éü·ÉØ·Éî·É¢·Éô·Éõ·Éü·Éë·Éê': '·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê', // circumference
    '·Éú·É¶·É≠·Éõ·Éô·É£': '·Éõ·É£·É™·Éö·Éò·É°',              // abdominal (genitive)
    '·Éë·Éê·É¢·ÉÆ·Éê·É™·Éô·É£': '·Éë·Éê·É†·É´·Éê·Éß·Éò·É°',          // femur (genitive)
    '·ÉÆ·Éï·Éõ·Éô·É£': '·É´·Éï·Éö·Éò·É°',               // bone (genitive)
    '·É£·Éô·Éí·É¢·ÉÆ·Éî': '·É°·Éò·Éí·É†·É´·Éî',              // length
    '·Éú·Éê·É£·Éê': '·Éõ·Éê·É°·Éê',                  // mass/weight
    '·Éù·Éê·É™·Éü·Éß·Éô·É£': '·Éú·Éê·Éß·Éù·É§·Éò·É°',            // fetus (genitive)
    '·Éú·Éì·Éî·Éë·Éê·É¢·Éî·Éü·Éë·Éê': '·Éõ·Éì·Éî·Éë·Éê·É†·Éî·Éù·Éë·Éê',       // location/position
    '·Éí·Éê·É¢·Éì·Éô·Éí·Éê·É¢·Éú·Éü': '·Éí·Éê·É†·Éì·Éê·Éõ·Éê·Éï·Éê·Éö·Éò',     // transverse
    '·ÉØ·Éô·Éù·Éê·Éú·Éì·Éî·Éë·Éê·É¢·Éî': '·ÉØ·Éò·Éù·Éê·Éõ·Éú·Éò·Éù·Éú·Éò',     // oligoamnios/amniotic
    '·É§·Éî·É¢·Éß·Éî·Éë·Éô': '·É§·Éù·Éö·Éì·Éî·Éë·Éò',            // folds
    
    // INSTITUTION AND LOCATION NAMES
    '·É©·Éò·Éê ·Éí·É£·Éö·Éò': '·É¶·Éò·Éê ·Éí·É£·Éö·Éò',            // Hospital name correction
    '·Éê·Éú·Éê·É†·Éò·É°': '·Éê·Éú·Éê·Éû·Éò·É°',               // Street name correction
    '·É®·É£·É¶·Éê': '·É•·É£·É©·Éê',                   // Street word correction
    '·Éì·Éò·Éï·Éò·Éñ·Éò·É°': '·Éì·Éò·Éï·Éò·Éñ·Éò·Éò·É°',            // Division (genitive) 
    
    // DATE AND TIME CORRECTIONS
    '12.08.25·ÉØ': '12.08.25·É¨',          // Date suffix correction
    
    // DEPARTMENT NAMES
    '·É°·Éê·Éõ·Éî·Éì·Éò·É™·Éò·Éú·Éù': '·É°·Éê·Éõ·Éî·Éê·Éú·Éù',           // Medical ‚Üí Obstetric
    
    // PATIENT INFO TERMS
    '·É£·Éî·Éì·Éô·ÉÆ': '·É°·Éî·Éì·Éò·ÉÆ',                 // Patient name correction
    
    // MEDICAL MEASUREMENTS AND TERMS
    '·Éù·Éü·É¢·Éú·Éê·Éõ·É¶·É¢·Éô': '·Éú·Éù·É†·Éõ·Éê·Éö·É£·É†·Éò',        // normal
    '·Éí·Éê·Éù·Éï·Éô·Éò·Éê·É¢·Éî·Éë·Éô·É£': '·Éí·Éê·Éú·Éï·Éò·Éó·Éê·É†·Éî·Éë·Éò·É°',    // development
    '·É®·Éê·Éõ·Éê,·Éë·Éî·É¢·Éë·Éî·Éú·Éê·Éõ·Éô': '·É•·Éê·Éö·Éê,·ÉÆ·Éî·É†·ÉÆ·Éî·Éõ·Éê·Éö·Éò', // skull,spine
    '·É§·Éï·Éô·Éù·Éô-·Éù·Éü·É¢·Éú·Éê·Éõ·É¶·É¢·Éô': '·É¢·Éï·Éò·Éú·Éò-·Éú·Éù·É†·Éõ·Éê·Éö·É£·É†·Éò', // brain-normal
    '·Éî·É®·Éü·É£·É§·É¢·É¶·É®·É§·É¶·É¢·Éô·É£': '·Éî·É•·Éù·É°·É¢·É†·É£·É•·É¢·É£·É†·Éò·É°', // echostructure
    '·É†·Éê·É¢·Éö·É¶·Éê·Éî·Éë·Éô': '·É¶·Éï·Éò·É´·Éö·Éî·Éë·Éò',         // ventricles
    '·Éì·Éô·Éõ·Éê·É§·Éê·É≠·Éô·É£': '·Éì·Éò·Éö·Éê·É¢·Éê·É™·Éò·Éò·É°',        // dilation
    '·Éí·Éê·É¢·Éî·É´·Éî': '·Éí·Éê·É†·Éî·É®·Éî',               // without
    
    // Additional complex medical terms
    '·Éï·Éô·Éñ·É¶·Éê·Éõ·Éô·Éñ·Éì·Éî·Éë·Éê': '·Éï·Éò·Éñ·É£·Éê·Éö·Éò·Éñ·Éì·Éî·Éë·Éê',    // visualized
    '·Éü·É¢·Éô·Éï·Éî': '·Éù·É†·Éò·Éï·Éî',                 // both
    '·Éò·Éô·É¢·Éú·Éõ·Éô·É£': '·Éó·Éò·É†·Éô·Éõ·Éö·Éò·É°',            // kidney (genitive)
    '·Éú·Éî·Éú·É∞·Éô': '·Éõ·Éî·Éú·ÉØ·Éò',                 // pelvis
    '·Éì·Éô·Éõ·Éê·É§·Éô·É¢·Éî·Éë·É¶·Éõ·Éô': '·Éì·Éò·Éö·Éê·É¢·Éò·É†·Éî·Éë·É£·Éö·Éò',   // dilated
    '·Éü·Éò·ÉÆ·Éú·Éê·Éú·Éî·É¢·Éô·Éê·Éú·Éô': '·Éù·Éó·ÉÆ·Éô·Éê·Éõ·Éî·É†·Éò·Éê·Éú·Éò',   // four-chambered
    '·Éì·Éê·É¢·É§·É™·Éú·Éê': '·Éì·Éê·É†·É¢·Éß·Éõ·Éê',             // beat/pulse
    '·É¶·Éò-·É´·Éô': '·É¨·Éó-·É®·Éò',                // per minute
    '·É¢·Éô·Éò·Éú·É¶·Éõ·Éô': '·É†·Éò·Éó·Éõ·É£·Éö·Éò',            // rhythmic
    '·É†·Éõ·Éê·ÉØ·Éî·Éú·É§·Éê': '·Éû·Éö·Éê·É™·Éî·Éú·É¢·Éê',          // placenta
    '·É£·Éê·É´·Éï·Éô·Éõ·Éü·É£·Éù·Éü·É£': '·É°·Éê·É®·Éï·Éò·Éö·Éù·É°·Éú·Éù·É°',   // uterus (genitive)
    '·ÉØ·Éô·Éù·Éê': '·É¨·Éò·Éú·Éê',                  // anterior
    '·Éú·Éî·Éì·Éî·Éõ·Éñ·Éî': '·Éô·Éî·Éì·Éî·Éö·Éñ·Éî',            // on the wall
    '·É£·Éô·É£·É¶·Éî': '·É°·Éò·É°·É•·Éî',               // thickness
    '·É£·Éô·Éú·Éï·Éô·Éß·Éô·É£': '·É°·Éò·Éõ·É¨·Éò·É§·Éò·É°',          // maturity
    '·ÉÆ·Éê·É¢·Éô·É£·É¶·Éô': '·ÉÆ·Éê·É†·Éò·É°·ÉÆ·Éò',            // degree/grade
    '·Éî·É¢·Éò·Éí·Éï·Éê·É¢·Éü·Éï·Éê·Éú·Éô': '·Éî·É†·Éó·Éí·Éï·Éê·É†·Éù·Éï·Éê·Éú·Éò',  // homogeneous
    '·É≠·Éô·É†·Éõ·Éê·É¢·Éô': '·É≠·Éò·Éû·Éö·Éê·É†·Éò',           // umbilical cord
    '·É£·Éê·Éú·Éô': '·É°·Éê·Éõ·Éò',                 // three
    '·É£·Éô·É£·ÉÆ·Éõ·É´·Éê·É¢·É¶·Éï·Éô·Éò': '·É°·Éò·É°·ÉÆ·Éö·É´·Éê·É†·É¶·Éï·Éò·Éó', // with blood vessels
    '·É£·Éê·Éù·Éê·É™·Éü·Éß·Éî': '·É°·Éê·Éú·Éê·Éß·Éù·É§·Éî',         // amniotic
    '·Éï·É™·Éõ·Éî·Éë·Éô': '·É¨·Éß·Éö·Éî·Éë·Éò',              // waters/fluid
    '·Éú·Éê·É®·É£·Éô·Éú·É¶·É¢·Éê·Éì': '·Éõ·Éê·É•·É°·Éò·Éõ·Éê·Éö·É£·É†·Éê·Éì',   // maximally
    '·É¶·É¢·Éú·Éê': '·É¶·É†·Éõ·Éê',                 // deep
    '·É∞·Éô·Éë·Éî·É´·Éô': '·ÉØ·Éò·Éë·Éî·É®·Éò',             // in pocket
    '·É£·É§·É¢·É¶·É®·É§·É¶·É¢·Éê': '·É°·É¢·É†·É£·É•·É¢·É£·É†·Éê',      // structure
    '·É™·Éî·Éõ·Éô·É£': '·Éß·Éî·Éö·Éò·É°',               // neck (genitive)
    '·É´·Éô·Éì·Éê': '·É®·Éò·Éì·Éê',                 // inner
    '·É†·Éô·É¢·Éô': '·Éû·Éò·É†·Éò',                 // opening
    '·Éê·É¢·ÉÆ·Éô': '·Éê·É†·ÉÆ·Éò',                // canal
    '·Éê·É¢': '·Éê·É†',                    // not
    '·Éê·É¢·Éô·É£': '·Éê·É†·Éò·É°',                // is not
    '·Éì·É¶·Éí·Éõ·Éê·É£·Éô·É£': '·Éì·É£·Éí·Éö·Éê·É°·Éò·É°',        // Douglas
    '·Éß·Éü·É£·Éü·É´·Éô': '·É§·Éù·É°·Éù·É®·Éò',            // in pouch
    '·Éß·Éô·É®·É£·Éô·É¢·Éì·Éî·Éë·Éê': '·É§·Éò·É•·É°·Éò·É†·Éì·Éî·Éë·Éê',     // is fixed
    '·Éì·Éê·Éê·É¶·Éõ·Éü·Éî·Éë·Éô·Éò': '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó',     // approximately
    '·Éú·Éõ': '·Éõ·Éö',                    // ml
    '·Éò·Éê·Éï·Éô·É£·É¶·Éß·Éê·Éõ·Éô': '·Éó·Éê·Éï·Éò·É°·É£·É§·Éê·Éö·Éò',     // free
    '·É£·Éô·Éò·ÉÆ·Éî': '·É°·Éò·Éó·ÉÆ·Éî',              // fluid
    '·Éí·Éê·Éú·Éü·ÉÆ·Éê·É§·É¶·Éõ·Éô·Éê': '·Éí·Éê·Éõ·Éù·ÉÆ·Éê·É¢·É£·Éö·Éò·Éê',   // expressed
    '·É¶·Éú·Éê·Éú·Éê': '·É¨·Éò·Éú·Éê',               // anterior
    '·É¶·Éú·Éê·Éù·Éê': '·É£·Éô·Éê·Éú·Éê',              // posterior
    '·Éú·Éî·Éì·Éõ·Éô·É£': '·Éô·Éî·Éì·Éö·Éò·É°',            // wall (genitive)
    '·É§·Éü·Éù·É¶·É£·Éô': '·É¢·Éù·Éú·É£·É°·Éò',           // tonus
    '·Éê·É¢·É§·Éî·É¢·Éô·Éê·É´·Éô': '·Éê·É†·É¢·Éî·É†·Éò·Éê·É®·Éò',      // in artery
    '·É´·Éï·Éî·Éõ': '·É´·Éï·Éî·Éö',                // old
    '·É†·Éê·É£·É¶·ÉÆ·Éî·Éë·Éñ·Éî': '·Éû·Éê·É°·É£·ÉÆ·Éî·Éë·Éñ·Éî',       // on answers
    '·Éì·Éê·É™·É¢·Éì·Éù·Éü·Éë·Éô·Éò': '·Éì·Éê·Éß·É†·Éì·Éú·Éù·Éë·Éò·Éó',    // based on
    '·É¶·Éù·Éì·Éê': '·É£·Éú·Éì·Éê',               // should
    '·Éô·É™·Éü·É£': '·Éò·Éß·Éù·É°',               // be
    '·Éú·Éï·Éô·É¢·Éê': '·Éô·Éï·Éò·É†·Éê',              // week
    '·Éì·É¶·Éî': '·Éì·É¶·Éî',                 // day
    '·É†·Éî·É¢·ÉØ·Éî·Éú·É§·Éô·Éõ·Éô': '·Éû·Éî·É†·É™·Éî·Éú·É¢·Éò·Éö·Éò',    // percentile
    
    // LATIN EXTENDED PATTERNS (actual encoded forms from PDFs)
    '√å√ò√è√Å√â√Ä√í√è√Å√â√ì': '·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°',
    '√ì√Ä√ù√Ä√í√è': '·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù', 
    '√î√Ä√í√â√ò√â': '·Éó·Éê·É†·Éò·É¶·Éò',
    '√î√Ñ√î√è√å√Ñ√î√í√â√Ä': '·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê',
    '√à√Å√â√ã√â√ì√â': '·Éó·Éë·Éò·Éö·Éò·É°·Éò',
    '√Ä√ç√Ä√ê√â√ì': '·Éê·Éú·Éê·Éû·Éò·É°',
    '√É√â√Ö√â√Ü√â√â√ì': '·Éì·Éò·Éï·Éò·Éñ·Éò·Éò·É°',
    '√ò√ñ√ú√Ä': '·É•·É£·É©·Éê',
    '√ì√Ä√ò√Ä√í√à√Ö√Ñ√ã√è': '·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù',
    '√ì√Ä√ò√Ä√í√à√Ö√Ñ√ã√è√ì': '·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É°',
    '√ì√Ä√å√Ñ√Ä√ç√è-√Ç√â√ç√Ñ√ä√è√ã√è√Ç√â√ñ√í√â √É√Ñ√ê√Ä√í√î√Ä√å√Ñ√ç√î√â': '·É°·Éê·Éõ·Éî·Éê·Éú·Éù-·Éí·Éò·Éú·Éî·Éô·Éù·Éö·Éù·Éí·Éò·É£·É†·Éò ·Éì·Éî·Éû·Éê·É†·É¢·Éê·Éõ·Éî·Éú·É¢·Éò',
    '√ì√Ñ√É√â√° √â√Ä√ç√Ä': '·É°·Éî·Éì·Éò·ÉÆ ·Éò·Éê·Éú·Éê',
    '√õ√ê√ì "√ô√â√Ä √Ç√ñ√ã√â-√ì√Ä√ñ√ç√â√Ö√Ñ√í√ì√â√î√Ñ√î√è √§√è√ì√ê√â√î√Ä√ã√â"': '·É®·Éû·É° "·É¶·Éò·Éê ·Éí·É£·Éö·Éò-·É°·Éê·É£·Éú·Éò·Éï·Éî·É†·É°·Éò·É¢·Éî·É¢·Éù ·É∞·Éù·É°·Éû·Éò·É¢·Éê·Éö·Éò"',
    
    // Additional Latin Extended word mappings from the new text
    '√ì√Ä√Ö√Ä√í√Ä√ñ√É√è': '·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù',    // "·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù"
    '√Ö√Ä√É√Ä': '·Éï·Éê·Éì·Éê',              // "·Éï·Éê·Éì·Éê"  
    '√ó√Ñ√î√è√å√Ñ√î√í√â√Ä': '·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê',  // "·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê"
    '√à√Ä√Ö√â√ì': '·Éó·Éê·Éï·Éò·É°',            // "·Éó·Éê·Éï·Éò·É°"
    '√Å√â√ê√Ä√í√â√Ñ√î√Ä√ã√ñ√í√â': '·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò', // "·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò"
    '√Ü√è√å√Ä': '·Éñ·Éù·Éõ·Éê',              // "·Éñ·Éù·Éõ·Éê"
    '√Ç√Ä√í√õ√Ñ√å√è√ü√Ñ√í√â√ã√è√Å√Ä': '·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê', // "·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê"
    '√å√ñ√ù√ã√â√ì': '·Éõ·É£·É™·Éö·Éò·É°',          // "·Éõ·É£·É™·Éö·Éò·É°"
    '√Å√Ä√í√û√Ä√ö√â√ì': '·Éë·Éê·É†·É´·Éê·Éß·Éò·É°',      // "·Éë·Éê·É†·É´·Éê·Éß·Éò·É°"
    '√û√Ö√ã√â√ì': '·É´·Éï·Éö·Éò·É°',            // "·É´·Éï·Éö·Éò·É°"
    '√ì√â√Ç√í√û√Ñ': '·É°·Éò·Éí·É†·É´·Éî',          // "·É°·Éò·Éí·É†·É´·Éî"
    
    // NEW MAPPINGS from the latest problematic text
    '·É°·Éê·Éö·Éî·Éê·Éö·Éù-·Éí·Éó·Éö·Éî·Éó·Éù·Éö·Éù·Éí·Éó·É°·Éû·Éó': '·É°·Éê·Éõ·Éî·Éê·Éú·Éù-·Éí·Éò·Éú·Éî·Éô·Éù·Éö·Éù·Éí·Éò·É£·É†·Éò',  // department name
    '·Éì·Éî·Éû·Éê·Éû·Éê·Éö·Éî·Éö·Éû·Éó': '·Éì·Éî·Éû·Éê·É†·É¢·Éê·Éõ·Éî·Éú·É¢·Éò',        // department  
    '·É°·Éî·Éì·Éó·ÉÆ': '·É°·Éî·Éì·Éò·ÉÆ',                      // patient name part
    '·Éó·Éê·Éö·Éê': '·Éò·Éê·Éú·Éê',                        // patient name part
    '·É•·Éû·É°': '·É®·Éû·É°',                          // company abbreviation
    '·É£·Éó·Éê ·Éí·É°·Éö·Éó-·É°·Éê·É°·Éö·Éó·Éï·Éî·Éû·É°·Éó·Éû·Éî·Éû·Éù ·É∞·Éù·É°·Éû·Éó·Éû·Éê·Éö·Éó': '·É¶·Éò·Éê ·Éí·É£·Éö·Éò-·É°·Éê·É£·Éú·Éò·Éï·Éî·É†·É°·Éò·É¢·Éî·É¢·Éù ·É∞·Éù·É°·Éû·Éò·É¢·Éê·Éö·Éò', // hospital name
    '·Éó·Éë·Éó·Éö·Éó·É°·Éó': '·Éó·Éë·Éò·Éö·Éò·É°·Éò',                  // Tbilisi
    '·Éê·Éö·Éê·Éû·Éó·É°': '·Éê·Éú·Éê·Éû·Éò·É°',                    // Anapi (street)
    '·Éì·Éó·Éï·Éó·Éñ·Éó·É°': '·Éì·Éò·Éï·Éò·Éñ·Éò·Éò·É°',                  // division
    '·É•·É°·É¶·Éê': '·É•·É£·É©·Éê',                        // street
    '·É°·Éê·É•·Éê·Éû·Éó·Éï·Éî·Éö·Éù': '·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù',            // Georgia
    
    // CRITICAL NEW MAPPINGS from the current problematic text
    '·Éö·É•·Éù·Éó·Éû·É°·Éù·Éó·Éû·Éó': '·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°',           // pregnancy (this appears multiple times)
    '·É°·Éê·Éï·Éê·Éû·Éê·É°·Éì·Éù': '·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù',              // estimated/presumed
    '·É¢·Éî·Éû·Éù·Éö·Éî·Éû·Éó·Éê': '·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê',           // fetometry
    '·Éó·Éê·Éï·Éó·É°': '·Éó·Éê·Éï·Éò·É°',                      // head (genitive)
    '·Éë·Éó·Éû·Éê·Éû·Éó·Éî·Éû·Éê·Éö·É°·Éû·Éó': '·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò',    // biparietal
    '·Éñ·Éù·Éö·Éê': '·Éñ·Éù·Éõ·Éê',                       // measurement
    '·Éí·Éê·Éû·É•·Éî·Éö·Éù·É¨·Éî·Éû·Éó·Éö·Éù·Éë·Éê': '·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê', // circumference
    '·Éö·É°·É™·Éö·Éó·É°': '·Éõ·É£·É™·Éö·Éò·É°',                   // abdominal (genitive) 
    '·Éë·Éê·Éû·É•·Éê·É§·Éó·É°': '·Éë·Éê·É†·É´·Éê·Éß·Éò·É°',               // femur (genitive)
    '·É•·Éï·Éö·Éó·É°': '·É´·Éï·Éö·Éò·É°',                     // bone (genitive)
    '·É°·Éó·Éí·Éû·É•·Éî': '·É°·Éò·Éí·É†·É´·Éî',                   // length
    '·Éö·É°·Éó·É°': '·Éõ·Éê·É°·Éê',                       // mass/weight
    '·Éù·É°·É™·Éù·É§·Éû·Éó': '·Éú·Éê·Éß·Éù·É§·Éò·É°',                 // fetus (genitive)
    '·Éö·Éì·É¢·Éó·É°·É¢·Éù·Éó·É°': '·Éõ·Éì·Éî·Éë·Éê·É†·Éî·Éù·Éë·Éê·É°',           // location/position
    '·É°·Éö·É°·Éö·É°·Éì': '·É°·Éê·É°·É¨·Éù·É†·Éò',                 // correct/normal
    '·Éí·É°·Éì·Éû·Éí·É°·Éö·Éù': '·Éí·Éê·Éì·Éê·É†·É©·Éî·Éú·Éê',              // survival/preservation
    '·É¨·Éû·Éù·É°·Éö·Éì·É¢·Éó·É°·É¢': '·Éû·É†·Éù·Éõ·Éò·Éñ·Éò·É¢·Éò',           // positive/promising
    '·Éû·É¢·É°·É§·É¢·Éó·Éû': '·Éû·Éù·Éñ·Éò·É™·Éò·Éê',                 // position
    '·É•·É°·Éö·É°': '·É•·Éê·Éö·Éê',                       // skull
    '·Éë·É¢·É°·Éë·É¢·Éö·É°·Éö·Éû': '·ÉÆ·Éî·É†·ÉÆ·Éî·Éõ·Éê·Éö·Éò',            // spine/backbone
    '·Éù·É°·Éö·É°·Éö·É£·É°·Éû': '·Éú·Éù·É†·Éõ·Éê·Éö·É£·É†·Éò',            // normal
    '·Éí·É°·Éù·Éï·Éû·Éó·É°·É¢·Éó·Éû·Éó': '·Éí·Éê·Éú·Éï·Éò·Éó·Éê·É†·Éî·Éë·Éò·É°',        // development
    '·Éû·Éï·Éû·Éù·Éû': '·É¢·Éï·Éò·Éú·Éò',                     // brain
    '·É¢·É•·Éù·Éó·Éû·É°·É£·É•·Éû·É£·É°·Éû·Éó': '·Éî·Éô·Éù·É°·É¢·É†·É£·É•·É¢·É£·É†·Éò·É°',    // echostructure
    '·Éû·É°·Éö·É£·Éê·Éó·Éû': '·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·Éò',              // parietal
    '·Éì·Éû·Éö·É°·Éû·É°·É•·Éû·Éó': '·Éì·Éò·Éö·Éê·É¢·Éê·É™·Éò·Éò·É°',           // dilation
    '·Éí·É°·É¢·É•·É¢': '·Éí·Éê·É†·Éî·É®·Éî',                    // without
    
    // NEW PATTERNS from the latest extracted text that need fixing
    '·É°·Éê·Éö·Éî·Éê·Éù-·Éí·Éó·Éù·Éî·Éö·Éù·Éö·Éù·Éí·Éó·É£·Éû·Éó': '·É°·Éê·Éõ·Éî·Éê·Éú·Éù-·Éí·Éò·Éú·Éî·Éô·Éù·Éö·Éù·Éí·Éò·É£·É†·Éò', // department name
    '·Éì·Éî·Éû·Éê·Éû·É¢·Éê·Éö·Éî·Éù·É¢·Éó': '·Éì·Éî·Éû·Éê·É†·É¢·Éê·Éõ·Éî·Éú·É¢·Éò',                    // department
    '·É°·Éî·Éì·Éó·Éë': '·É°·Éî·Éì·Éò·ÉÆ',                                   // patient name
    '·Éó·Éê·Éù·Éê': '·Éò·Éê·Éú·Éê',                                      // patient name
    '·É¶·Éó·Éê ·Éí·É£·Éö·Éó-·É°·Éê·É£·Éù·Éó·Éï·Éî·Éû·É°·Éó·É¢·Éî·É¢·Éù ·Éî·Éù·É°·Éû·Éó·É¢·Éê·Éö·Éó': '·É¶·Éò·Éê ·Éí·É£·Éö·Éò-·É°·Éê·É£·Éú·Éò·Éï·Éî·É†·É°·Éò·É¢·Éî·É¢·Éù ·É∞·Éù·É°·Éû·Éò·É¢·Éê·Éö·Éò', // hospital
    '·Éê·Éù·Éê·Éû·Éó·É°': '·Éê·Éú·Éê·Éû·Éò·É°',                                 // street name
    '·É•·É£·É¨·Éê': '·É•·É£·É©·Éê',                                     // street
    '·Éö·É≠·Éó·Éû·Éî ·Éö·Éî·Éù·Éì·Éó·É°': '·Éõ·É™·Éò·É†·Éî ·Éõ·Éî·Éú·ÉØ·Éò·É°',                     // small pelvis
    '·É¶·Éû·É£·É°/·Éï·Éê·Éí·Éó·Éù·Éê·Éö·É£·Éû·Éó': '·É¶·É†·É£·É°/·Éï·Éê·Éí·Éò·Éú·Éê·Éö·É£·É†·Éò',            // cavity/vaginal
    '·Éö·É•·Éù·Éë·Éó·Éê·Éû·Éù·Éë·Éó·É°': '·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°',                      // pregnancy
    '·É°·Éê·Éï·Éê·Éû·Éê·É£·Éì·Éù': '·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù',                          // estimated
    '·É§·Éî·É¢·Éù·Éö·Éî·É¢·Éû·Éó·Éê': '·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê',                      // fetometry
    '·Éë·Éó·Éû·Éê·Éû·Éó·Éî·É¢·Éê·Éö·É£·Éû·Éó': '·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò',               // biparietal
    '·Éö·É£·É≠·Éö·Éó·É°': '·Éõ·É£·É™·Éö·Éò·É°',                               // abdominal
    '·Éë·Éê·Éû·ÉÆ·Éê·É™·Éó·É°': '·Éë·Éê·É†·É´·Éê·Éß·Éò·É°',                           // femur
    '·ÉÆ·Éï·Éö·Éó·É°': '·É´·Éï·Éö·Éò·É°',                                 // bone
    '·É°·Éó·Éí·Éû·ÉÆ·Éî': '·É°·Éò·Éí·É†·É´·Éî',                               // length
    '·Éö·Éê·É°·Éê': '·Éõ·Éê·É°·Éê',                                   // mass
    '·Éù·Éê·É™·Éù·É§·Éó·É°': '·Éú·Éê·Éß·Éù·É§·Éò·É°',                             // fetus
    '·Éö·Éì·Éî·Éë·Éê·Éû·Éî·Éù·Éë·Éê': '·Éõ·Éì·Éî·Éë·Éê·É†·Éî·Éù·Éë·Éê',                       // location
    '·Éê·Éö·É°·Éê·Éö·Éê·Éì': '·Éê·Éõ·Éü·Éê·Éõ·Éê·Éì',                            // currently
    '·Éí·Éê·Éû·Éì·Éó·Éí·Éê·Éû·Éö·Éù': '·Éí·Éê·É†·Éì·Éê·Éõ·Éê·Éï·Éê·Éö·Éò',                      // transverse
    '·É¨·Éó·Éù·Éê·Éö·Éì·Éî·Éë·Éê·Éû·Éî': '·É¨·Éò·Éú·Éê·Éõ·Éì·Éî·Éë·Éê·É†·Éî',                     // anterior
    '·É¢·Éî·Éû·É§·Éî·Éë·Éó': '·É¢·Éî·É†·É§·Éî·Éë·Éò',                             // lobes
    '·Éë·Éî·Éû·Éë·Éî·Éö·Éê·Éö·Éó': '·ÉÆ·Éî·É†·ÉÆ·Éî·Éõ·Éê·Éö·Éò',                         // spine
    '·Éù·Éû·Éö·Éê·Éö·É£·Éû·Éó': '·Éú·Éù·É†·Éõ·Éê·Éö·É£·É†·Éò',                         // normal
    '·Éí·Éê·Éù·Éï·Éó·Éê·Éû·Éî·Éë·Éó·É°': '·Éí·Éê·Éú·Éï·Éò·Éó·Éê·É†·Éî·Éë·Éò·É°',                    // development
    '·É¢·Éï·Éó·Éù·Éó': '·É¢·Éï·Éò·Éú·Éò',                                 // brain
    '·Éî·É•·Éù·É°·É¢·Éû·É£·É•·É¢·É£·Éû·Éó·É°': '·Éî·É•·Éù·É°·É¢·É†·É£·É•·É¢·É£·É†·Éò·É°',               // echostructure
    '·Éû·Éê·Éû·Éö·É£·Éê·Éî·Éë·Éó': '·Éû·Éê·É†·Éô·É£·É≠·Éî·Éë·Éò',                         // ventricles
    '·Éì·Éó·Éö·Éê·É†·Éê·É≠·Éó·É°': '·Éì·Éò·Éö·Éê·É¢·Éê·É™·Éò·Éò·É°',                       // dilation
    '·Éí·Éê·Éû·Éî·É•·Éî': '·Éí·Éê·É†·Éî·É®·Éî',                               // without
    '·Éí·É£·Éö·Éî·Éû·Éì·Éó·É°': '·Éí·É£·Éö·Éõ·Éô·Éî·É†·Éì·Éò·É°',                        // chest
    '·É¶·Éû·É£·É°·Éê': '·É¶·É†·É£·É°·Éê',                                // cavity
    '·É°·Éê·É•·Éê·Éû·Éì·Éî': '·É°·Éê·É®·Éê·É†·Éì·Éî',                             // urinary
    '·É°·Éó·É°·É¢·Éî·Éö·Éó·É°': '·É°·Éò·É°·É¢·Éî·Éõ·Éò·É°',                          // system
    '·Éù·Éû·Éí·Éê·Éù·Éî·Éë·Éó': '·Éù·É†·Éí·Éê·Éú·Éù·Éî·Éë·Éò',                         // organs
    '·Éï·Éó·Éñ·É£·Éê·Éö·Éó·Éñ·Éì·Éî·Éë·Éê': '·Éï·Éò·Éñ·É£·Éê·Éö·Éò·Éñ·Éì·Éî·Éë·Éê',                  // visualized
    '·Éù·Éû·Éó·Éï·Éî': '·Éù·É†·Éò·Éï·Éî',                                // both
    '·Éó·Éû·Éö·Éó·É°': '·Éó·Éò·É†·Éô·Éõ·Éö·Éò·É°',                             // kidney
    '·Éö·Éî·Éù·Éì·Éó': '·Éõ·Éî·Éú·ÉØ·Éò',                                // pelvis
    '·Éì·Éó·Éö·Éê·É†·Éó·Éû·Éî·Éë·É£·Éö·Éó': '·Éì·Éò·Éö·Éê·É¢·Éò·É†·Éî·Éë·É£·Éö·Éò',                 // dilated
    '·Éö-·Éö·Éì·Éî': '·Éõ·Éõ-·Éõ·Éì·Éî',                                // mm-up to
    '·Éí·É£·Éö·Éó': '·Éí·É£·Éö·Éò',                                  // heart
    '·Éù·Éó·Éë·Éö·Éê·Éö·Éî·Éû·Éó·Éê·Éù·Éó': '·Éù·Éó·ÉÆ·Éô·Éê·Éõ·Éî·É†·Éò·Éê·Éú·Éò',                  // four-chambered
    '·Éì·Éê·Éû·É¢·É™·Éö·Éê': '·Éì·Éê·É†·É¢·Éß·Éõ·Éê',                            // beat
    '·É¨·Éó-·É•·Éó': '·É¨·Éó-·É®·Éò',                                // per minute
    '·Éû·Éó·Éö·É£·Éö·Éó': '·É†·Éò·Éó·Éõ·É£·Éö·Éò',                            // rhythmic
    '·Éû·Éö·Éê·É≠·Éî·Éù·É¢·Éê': '·Éû·Éö·Éê·É™·Éî·Éú·É¢·Éê',                          // placenta
    '·É°·Éê·É•·Éï·Éó·Éö·Éù·É°·Éù·É°': '·É°·Éê·É®·Éï·Éò·Éö·Éù·É°·Éú·Éù·É°',                     // uterus
    '·É¨·Éó·Éù·Éê': '·É¨·Éò·Éú·Éê',                                   // anterior
    '·Éö·Éî·Éì·Éî·Éö·Éñ·Éî': '·Éô·Éî·Éì·Éî·Éö·Éñ·Éî',                            // on wall
    '·É°·Éó·É°·É•·Éî': '·É°·Éò·É°·É•·Éî',                                // thickness
    '·É°·Éó·Éö·É¨·Éó·É§·Éó·É°': '·É°·Éò·Éõ·É¨·Éò·É§·Éò·É°',                          // maturity
    '·Éë·Éê·Éû·Éó·É°·Éë·Éó': '·ÉÆ·Éê·É†·Éò·É°·ÉÆ·Éò',                            // degree
    '·Éî·Éû·Éó·Éí·Éï·Éê·Éû·Éù·Éï·Éê·Éù·Éó': '·Éî·É†·Éó·Éí·Éï·Éê·É†·Éù·Éï·Éê·Éú·Éò',                  // homogeneous
    '·Éê·Éó·Éû·Éö·Éê·Éû·Éó': '·É≠·Éò·Éû·Éö·Éê·É†·Éò',                            // umbilical cord
    '·É°·Éê·Éö·Éó': '·É°·Éê·Éõ·Éò',                                   // three
    '·É°·Éó·É°·Éë·Éö·ÉÆ·Éê·Éû·É¶·Éï·Éó': '·É°·Éò·É°·ÉÆ·Éö·É´·Éê·É†·É¶·Éï·Éò·Éó',                  // with blood vessels
    '·É°·Éê·Éù·Éê·É™·Éù·É§·Éî': '·É°·Éê·Éú·Éê·Éß·Éù·É§·Éî',                          // amniotic
    '·É¨·É™·Éö·Éî·Éë·Éó': '·É¨·Éß·Éö·Éî·Éë·Éò',                              // waters
    '·Éö·Éê·É•·É°·Éó·Éö·Éê·Éö·É£·Éû·Éê·Éì': '·Éõ·Éê·É•·É°·Éò·Éõ·Éê·Éö·É£·É†·Éê·Éì',                 // maximally
    '·É¶·Éû·Éö·Éê': '·É¶·É†·Éõ·Éê',                                  // deep
    '·Éì·Éó·Éë·Éî·É•·Éó': '·ÉØ·Éò·Éë·Éî·É®·Éò',                              // in pocket
    '·É°·É¢·Éû·É£·É•·É¢·É£·Éû·Éê': '·É°·É¢·É†·É£·É•·É¢·É£·É†·Éê',                       // structure
    '·É™·Éî·Éö·Éó·É°': '·Éß·Éî·Éö·Éò·É°',                                // neck
    '·É•·Éó·Éì·Éê': '·É®·Éò·Éì·Éê',                                   // inner
    '·Éû·Éó·Éû·Éó': '·Éû·Éò·É†·Éò',                                   // opening
    '·Éê·Éû·Éë·Éó': '·Éê·É†·ÉÆ·Éò',                                  // canal
    '·Éê·Éû': '·Éê·É†',                                      // not
    '·Éê·Éû·Éó·É°': '·Éê·É†·Éò·É°',                                  // is
    '·Éì·É£·Éí·Éö·Éê·É°·Éó·É°': '·Éì·É£·Éí·Éö·Éê·É°·Éò·É°',                          // Douglas
    '·É§·Éù·É°·Éù·É•·Éó': '·É§·Éù·É°·Éù·É®·Éò',                              // in pouch
    '·Éö·Éî·Éì·Éî·Éö·Éó·Éê·Éù': '·Éô·Éî·Éì·Éî·Éö·Éó·Éê·Éú',                          // near wall
    '·É§·Éó·É•·É°·Éó·Éû·Éì·Éî·Éë·Éê': '·É§·Éò·É•·É°·Éò·É†·Éì·Éî·Éë·Éê',                      // is fixed
    '·Éì·Éê·Éë·Éö·Éù·Éî·Éë·Éó': '·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó',                       // approximately
    '·Éö': '·Éõ·Éö',                                        // ml (milliliters)
    '·Éó·Éê·Éï·Éò·É°·É£·É§·Éê·Éö·Éó': '·Éó·Éê·Éï·Éò·É°·É£·É§·Éê·Éö·Éò',                      // free
    '·É°·Éó·Éë·Éî': '·É°·Éò·Éó·ÉÆ·Éî',                                 // fluid
    '·Éí·Éê·Éö·Éù·Éë·Éê·É†·É£·Éö·Éó·Éê': '·Éí·Éê·Éõ·Éù·ÉÆ·Éê·É¢·É£·Éö·Éò·Éê',                   // expressed
    '·É£·Éö·Éê·Éù·Éê': '·É£·Éô·Éê·Éú·Éê',                               // posterior
    '·Éö·Éî·Éì·Éö·Éó·É°': '·Éô·Éî·Éì·Éö·Éò·É°',                             // wall
    '·É¢·Éù·É£·É°·Éó': '·É¢·Éù·Éú·É£·É°·Éò',                              // tonus
    '·Éê·Éû·É¢·Éî·Éû·Éó·Éê·É•·Éó': '·Éê·É†·É¢·Éî·É†·Éò·Éê·É®·Éò',                        // in artery
    '·ÉÆ·Éï·Éî·Éö': '·É´·Éï·Éî·Éö',                                  // old
    '·Éû·Éê·É°·É£·Éë·Éî·Éë·Éñ·Éî': '·Éû·Éê·É°·É£·ÉÆ·Éî·Éë·Éñ·Éî',                         // on answers
    '·Éì·Éê·É™·Éû·Éì·Éù·Éë·Éó': '·Éì·Éê·Éß·É†·Éì·Éú·Éù·Éë·Éò·Éó',                       // based on
    '·É£·Éù·Éì·Éê': '·É£·Éú·Éì·Éê',                                  // should
    '·Éó·É™·Éù·É°': '·Éò·Éß·Éù·É°',                                  // be
    '·Éö·Éï·Éó·Éû·Éê': '·Éô·Éï·Éò·É†·Éê',                                // week
    '·Éû·Éî·Éû·É≠·Éî·Éù·É¢·Éó·Éö·Éó': '·Éû·Éî·É†·É™·Éî·Éú·É¢·Éò·Éö·Éò',                     // percentile
    '·Éö·Éî·É¢·Éû·Éî·Éï·Éî·Éö·Éó': '·Éõ·Éî·É¢·É†·Éî·Éï·Éî·Éö·Éò',                       // doctor surname
    '·Éò·Éê·Éú·Éê·Éû': '·Éò·Éê·Éú·Éê',                                  // patient name
    
    // Additional Latin Extended mappings that might be in the text
    '√å': '·Éõ', '√ù': '·É®', '√è': '·Éù', '√Å': '·Éò', '√â': '·É†', '√Ä': '·É°', '√í': '·É£', '√ì': '·Éó',
    '√ã': '·Éö', '√ê': '·Éû', '√î': '·É¢', '√Ñ': '·É§', '√ò': '·É•', '√ô': '·É¶', '√ü': '·É¨'
  };
  
  // Enhanced Russian character mappings
  const russianMappings: { [key: string]: string } = {
    // Cyrillic uppercase letters
    '√Ä': '–ê', '√Å': '–ë', '√Ç': '–í', '√É': '–ì', '√Ñ': '–î', '√Ö': '–ï', '√Ü': '–ñ', '√á': '–ó',
    '√à': '–ò', '√â': '–ô', '√ä': '–ö', '√ã': '–õ', '√å': '–ú', '√ç': '–ù', '√é': '–û', '√è': '–ü',
    '√ê': '–†', '√ë': '–°', '√í': '–¢', '√ì': '–£', '√î': '–§', '√ï': '–•', '√ñ': '–¶', '√ó': '–ß',
    '√ò': '–®', '√ô': '–©', '√ö': '–™', '√õ': '–´', '√ú': '–¨', '√ù': '–≠', '√û': '–Æ', '√ü': '–Ø',
    
    // Cyrillic lowercase letters
    '√†': '–∞', '√°': '–±', '√¢': '–≤', '√£': '–≥', '√§': '–¥', '√•': '–µ', '√¶': '–∂', '√ß': '–∑',
    '√®': '–∏', '√©': '–π', '√™': '–∫', '√´': '–ª', '√¨': '–º', '√≠': '–Ω', '√Æ': '–æ', '√Ø': '–ø',
    '√∞': '—Ä', '√±': '—Å', '√≤': '—Ç', '√≥': '—É', '√¥': '—Ñ', '√µ': '—Ö', '√∂': '—Ü', '√∑': '—á',
    '√∏': '—à', '√π': '—â', '√∫': '—ä', '√ª': '—ã', '√º': '—å', '√Ω': '—ç', '√æ': '—é', '√ø': '—è',
    
    // Special Cyrillic characters
    '–Å': '–Å', '—ë': '—ë'
  };
  
  // Detect the language and apply appropriate mappings
  const detectedLanguage = detectTextLanguage(text);
  let fixedText = text;
  
  // Only log detailed info for text that needs mapping
  if (detectedLanguage === 'georgian' || hasSylfaenGeorgianPatterns(text)) {
    console.log('üîç Georgian text detected - applying mappings:', {
      detectedLanguage,
      textSample: text.substring(0, 100),
      hasSylfaenPatterns: hasSylfaenGeorgianPatterns(text),
      hasGeorgianChars: /[\u10A0-\u10FF]/.test(text)
    });
  }
  
  if (detectedLanguage === 'georgian' || hasSylfaenGeorgianPatterns(text) || hasSylfaenGeorgianPatterns(fixedText)) {
    console.log('üîç Applying Georgian mappings - language detected as Georgian or Sylfaen patterns found');
    
    // Apply ONLY word mappings (character mappings were causing corruption)
    console.log('üîç Applying verified word mappings to fix Georgian text patterns');
    let wordMappingsApplied = 0;
    let problematicWordsFound = [];
    
    // Debug: Check which problematic words are found in text
    const problematicWords = Object.keys(specificWordMappings);
    for (const word of problematicWords) {
      if (fixedText.includes(word)) {
        problematicWordsFound.push(word);
      }
    }
    
    console.log('üîç Problematic words found in text:', {
      wordsFound: problematicWordsFound,
      totalWordsToCheck: problematicWords.length,
      textPreview: fixedText.substring(0, 200)
    });
    
    for (const [incorrectWord, correctWord] of Object.entries(specificWordMappings)) {
      // Check for exact match first (case sensitive)
      const beforeCount = (fixedText.match(new RegExp(incorrectWord.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g')) || []).length;
      if (beforeCount > 0) {
        fixedText = fixedText.replace(new RegExp(incorrectWord.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), correctWord);
        const afterCount = (fixedText.match(new RegExp(correctWord.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g')) || []).length;
        wordMappingsApplied++;
        console.log('üéØ Applied word mapping:', {
          incorrectWord: incorrectWord,
          correctWord: correctWord,
          replacements: beforeCount,
          foundAfter: afterCount
        });
      }
    }

    console.log(`üìä Word mappings applied: ${wordMappingsApplied} out of ${problematicWordsFound.length} found words`);
    
    console.log('üîÑ Final text processing results:', {
      original: text.substring(0, 100),
      fixed: fixedText.substring(0, 100),
      language: 'Georgian (Sylfaen)',
      changesDetected: text !== fixedText,
      // Enhanced debugging
      originalLength: text.length,
      fixedLength: fixedText.length,
      totalWordMappingsApplied: wordMappingsApplied,
      totalLatinExtendedConverted: latinExtendedFound,
      totalGeorgianCorrected: georgianCharsMapped,
      remainingLatinExtended: (fixedText.match(/[√Ä-√ø]/g) || []).length,
      georgianCharsInResult: (fixedText.match(/[\u10A0-\u10FF]/g) || []).length,
      textSample: fixedText.substring(0, 200)
    });
  } else {
    console.log('‚ÑπÔ∏è Georgian mappings not applied for this text item (normal for individual items)');
  }
  
  if (detectedLanguage === 'russian') {
    // Apply Russian character mappings
    for (const [latin, russian] of Object.entries(russianMappings)) {
      const regex = new RegExp(latin.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
      fixedText = fixedText.replace(regex, russian);
    }
    
    console.log('üîÑ Applied Russian character mapping:', {
      original: text.substring(0, 50),
      fixed: fixedText.substring(0, 50),
      language: 'Russian'
    });
  } else if (detectedLanguage === 'mixed') {
    // For mixed text, prioritize Georgian (common in medical documents)
    // First check if it has Georgian characteristics
    if (hasSylfaenGeorgianPatterns(text) || text.includes('·É£') || text.includes('·Éê') || text.includes('·Éî')) {
      // Apply Georgian mappings first
      for (const [latin, georgian] of Object.entries(sylfaenGeorgianMappings)) {
        const regex = new RegExp(latin.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
        fixedText = fixedText.replace(regex, georgian);
      }
      console.log('üîÑ Applied Georgian character mapping (mixed text with Georgian priority):', {
        original: text.substring(0, 50),
        fixed: fixedText.substring(0, 50),
        language: 'Mixed (Georgian priority)'
      });
    } else {
      // Apply Russian mappings
      for (const [latin, russian] of Object.entries(russianMappings)) {
        const regex = new RegExp(latin.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
        fixedText = fixedText.replace(regex, russian);
      }
      console.log('üîÑ Applied Russian character mapping (mixed text):', {
        original: text.substring(0, 50),
        fixed: fixedText.substring(0, 50),
        language: 'Mixed (Russian priority)'
      });
    }
  }
  
  // Post-processing: Clean up any remaining encoding artifacts
  fixedText = cleanupEncodingArtifacts(fixedText);
  
  return fixedText;
}

/**
 * Detect Sylfaen Georgian patterns in text
 */
function hasSylfaenGeorgianPatterns(text: string): boolean {
  // Common patterns found in Sylfaen-encoded Georgian medical documents
  const sylfaenPatterns = [
    /[√§√∂√º√Ñ√ñ√ú]/g, // Sylfaen diacritics commonly used for Georgian
    /·É£[√§-√ø]+/g, // Georgian ·É£ followed by Latin extended (mixed encoding)
    /[·Éê-·É∞][√Ä-√ø]/g, // Proper Georgian followed by Latin extended
    /[√Ä-√ø][·Éê-·É∞]/g, // Latin extended followed by proper Georgian
    /√à√Å√â√ã√â√ì√â/g, // Specific pattern from user's example
    /·É£·Éî·Éì·Éô√°/g, // Mixed Georgian-Latin pattern from user's example
    /√§·Éü·É£·É†·Éô·É§·Éê·Éõ·Éô/g, // Another mixed pattern from user's example
    /·Éì·Éî·É†·Éê·É¢·É§·Éê·Éú·Éî·Éù·É§·Éô/g, // Georgian medical terminology patterns
    /·Éí·Éô·Éù·Éî·Éö·Éü·Éõ·Éü·Éí·Éô·É¶·É¢·Éô/g, // More Georgian medical patterns
    
    // New patterns from actual document analysis
    /·Éú·É´·Éü·Éë·Éô·É¢·Éü·Éë·Éô·É£/g, // "·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°" encoded incorrectly
    /·É£·Éê·Éï·Éê·É¢·Éê·É¶·Éì·Éü/g, // "·É°·Éê·ÉØ·Éê·É†·Éù" encoded incorrectly
    /·Éß·Éî·É§·Éü·Éú·Éî·É§·É¢·Éô·Éê/g, // "·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê" encoded incorrectly
    /·Éò·Éê·Éï·Éô·É£/g, // "·Éó·Éê·Éï·Éò·É°" encoded incorrectly
    /·Éë·Éô·É†·Éê·É¢·Éô·Éî·É§·Éê·Éõ·É¶·É¢·Éô/g, // "·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò" encoded incorrectly
    /·Éñ·Éü·Éú·Éê/g, // "·Éñ·Éù·Éõ·Éê" encoded incorrectly
    /·Éí·Éê·É¢·É´·Éî·Éú·Éü·ÉØ·Éî·É¢·Éô·Éõ·Éü·Éë·Éê/g, // "·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê" encoded incorrectly
    /·Éú·É¶·É≠·Éõ·Éô·É£/g, // "·Éõ·É£·É™·Éö·Éò·É°" encoded incorrectly
    /·Éë·Éê·É¢·ÉÆ·Éê·É™·Éô·É£/g, // "·Éë·Éê·É†·É´·Éê·Éß·Éò·É°" encoded incorrectly
    /·ÉÆ·Éï·Éõ·Éô·É£/g, // "·ÉÆ·É†·Éê·ÉÆ·Éú·Éò·É°" encoded incorrectly
    /·É£·Éô·Éí·É¢·ÉÆ·Éî/g, // "·É°·Éò·Éí·É†·É´·Éî" encoded incorrectly
    /·Éú·Éê·É£·Éê/g, // "·Éõ·Éê·É°·Éê" encoded incorrectly (but could be ambiguous)
    /·Éù·Éê·É™·Éü·Éß·Éô·É£/g, // "·Éú·Éê·Éß·Éù·É§·Éò·É°" encoded incorrectly
    /·Éú·Éì·Éî·Éë·Éê·É¢·Éî·Éü·Éë·Éê/g, // "·Éõ·Éì·Éî·Éë·Éê·É†·Éî·Éù·Éë·Éê" encoded incorrectly
    /·Éí·Éê·É¢·Éì·Éô·Éí·Éê·É¢·Éú·Éü/g, // "·Éí·Éê·É†·Éì·Éê·Éõ·Éê·Éï·Éê·Éö·Éò" encoded incorrectly
    /·ÉØ·Éô·Éù·Éê·Éú·Éì·Éî·Éë·Éê·É¢·Éî/g, // "·ÉØ·Éò·Éù·Éê·Éõ·Éú·Éò·Éù·Éú·Éò" encoded incorrectly
    
    // CRITICAL NEW PATTERNS from the latest problematic text (needed for detection)
    /·Éö·É•·Éù·Éó·Éû·É°·Éù·Éó·Éû·Éó/g, // "·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°" - appears multiple times in user's text
    /·É°·Éê·Éï·Éê·Éû·Éê·É°·Éì·Éù/g, // "·É°·Éê·Éï·Éê·É†·Éê·É£·Éì·Éù" - estimated/presumed
    /·É¢·Éî·Éû·Éù·Éö·Éî·Éû·Éó·Éê/g, // "·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê" - fetometry
    /·Éó·Éê·Éï·Éó·É°/g, // "·Éó·Éê·Éï·Éò·É°" - head (genitive)
    /·Éë·Éó·Éû·Éê·Éû·Éó·Éî·Éû·Éê·Éö·É°·Éû·Éó/g, // "·Éë·Éò·Éû·Éê·É†·Éò·Éî·É¢·Éê·Éö·É£·É†·Éò" - biparietal
    /·Éñ·Éù·Éö·Éê/g, // "·Éñ·Éù·Éõ·Éê" - measurement
    /·Éí·Éê·Éû·É•·Éî·Éö·Éù·É¨·Éî·Éû·Éó·Éö·Éù·Éë·Éê/g, // "·Éí·Éê·É†·É®·Éî·Éõ·Éù·É¨·Éî·É†·Éò·Éö·Éù·Éë·Éê" - circumference
    /·Éö·É°·É™·Éö·Éó·É°/g, // "·Éõ·É£·É™·Éö·Éò·É°" - abdominal (genitive)
    /·Éë·Éê·Éû·É•·Éê·É§·Éó·É°/g, // "·Éë·Éê·É†·É´·Éê·Éß·Éò·É°" - femur (genitive)
    /·É•·Éï·Éö·Éó·É°/g, // "·É´·Éï·Éö·Éò·É°" - bone (genitive)
    /·É°·Éó·Éí·Éû·É•·Éî/g, // "·É°·Éò·Éí·É†·É´·Éî" - length
    /·Éö·É°·Éó·É°/g, // "·Éõ·Éê·É°·Éê" - mass/weight
    /·Éù·É°·É™·Éù·É§·Éû·Éó/g, // "·Éú·Éê·Éß·Éù·É§·Éò·É°" - fetus (genitive)
    /·É°·Éê·Éö·Éî·Éê·Éö·Éù-·Éí·Éó·Éö·Éî·Éó·Éù·Éö·Éù·Éí·Éó·É°·Éû·Éó/g, // "·É°·Éê·Éõ·Éî·Éê·Éú·Éù-·Éí·Éò·Éú·Éî·Éô·Éù·Éö·Éù·Éí·Éò·É£·É†·Éò" - department name
    /·Éì·Éî·Éû·Éê·Éû·Éê·Éö·Éî·Éö·Éû·Éó/g, // "·Éì·Éî·Éû·Éê·É†·É¢·Éê·Éõ·Éî·Éú·É¢·Éò" - department
    /·É°·Éî·Éì·Éó·ÉÆ/g, // "·É°·Éî·Éì·Éò·ÉÆ" - patient name part
    /·Éó·Éê·Éö·Éê/g, // "·Éò·Éê·Éú·Éê" - patient name part
    /·É•·Éû·É°/g, // "·É®·Éû·É°" - company abbreviation
    /·É£·Éó·Éê ·Éí·É°·Éö·Éó-·É°·Éê·É°·Éö·Éó·Éï·Éî·Éû·É°·Éó·Éû·Éî·Éû·Éù ·É∞·Éù·É°·Éû·Éó·Éû·Éê·Éö·Éó/g, // hospital name
    /·Éó·Éë·Éó·Éö·Éó·É°·Éó/g, // "·Éó·Éë·Éò·Éö·Éò·É°·Éò" - Tbilisi
    /·Éê·Éö·Éê·Éû·Éó·É°/g, // "·Éê·Éú·Éê·Éû·Éò·É°" - Anapi (street)
    /·Éì·Éó·Éï·Éó·Éñ·Éó·É°/g, // "·Éì·Éò·Éï·Éò·Éñ·Éò·Éò·É°" - division
    /·É•·É°·É¶·Éê/g, // "·É•·É£·É©·Éê" - street
    /·É°·Éê·É•·Éê·Éû·Éó·Éï·Éî·Éö·Éù/g, // "·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù" - Georgia
    /·É§·Éî·É¢·Éß·Éî·Éë·Éô/g, // "·É§·Éù·Éö·Éì·Éî·Éë·Éò" encoded incorrectly
    
    // Latin Extended patterns (actual extracted forms from console logs)
    /√å√ò√è√Å√â√Ä√í√è√Å√â√ì/g, // "·Éõ·É®·Éù·Éë·Éò·Éê·É†·Éù·Éë·Éò·É°" in Latin Extended encoding
    /√ì√Ä√ù√Ä√í√è/g, // "·É°·Éê·ÉØ·Éê·É†·Éù" in Latin Extended encoding  
    /√î√Ä√í√â√ò√â/g, // "·Éó·Éê·É†·Éò·É¶·Éò" in Latin Extended encoding
    /√î√Ñ√î√è√å√Ñ√î√í√â√Ä/g, // "·É§·Éî·É¢·Éù·Éõ·Éî·É¢·É†·Éò·Éê" in Latin Extended encoding
    /√à√Å√â√ã√â√ì√â/g, // "·Éó·Éë·Éò·Éö·Éò·É°·Éò" in Latin Extended encoding
    /√Ä√ç√Ä√ê√â√ì/g, // "·Éê·Éú·Éê·É†·Éò·É°" in Latin Extended encoding
    /√É√â√Ö√â√Ü√â√â√ì/g, // "·Éì·Éò·Éï·Éò·Éñ·Éò·Éò·É°" in Latin Extended encoding
    /√ò√ñ√ú√Ä/g, // encoded form in Latin Extended
    /√ì√Ä√ò√Ä√í√à√Ö√Ñ√ã√è√ì/g, // "·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É°" in Latin Extended encoding
    
    // General Latin Extended patterns that suggest Georgian encoding
    /[√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú√ù√û√ü]{3,}/g, // 3+ consecutive Latin Extended uppercase
    /[√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø]{3,}/g // 3+ consecutive Latin Extended lowercase
  ];
  
  return sylfaenPatterns.some(pattern => pattern.test(text));
}

/**
 * Clean up encoding artifacts after character mapping
 */
function cleanupEncodingArtifacts(text: string): string {
  let cleaned = text;
  
  // Remove or fix common encoding artifacts
  cleaned = cleaned
    // Fix double-mapped characters that might occur
    .replace(/([·Éê-·É∞])\1+/g, '$1') // Remove duplicate Georgian characters
    // Fix spacing issues around punctuation
    .replace(/\s+([,.!?;:])/g, '$1')
    .replace(/([,.!?;:])\s+/g, '$1 ')
    // Normalize whitespace
    .replace(/\s+/g, ' ')
    .trim();
  
  return cleaned;
}

/**
 * Enhanced language detection with Sylfaen font support
 */
function detectTextLanguage(text: string): 'georgian' | 'russian' | 'english' | 'mixed' {
  // Check for existing proper Unicode characters
  const hasGeorgian = /[\u10A0-\u10FF]/.test(text);
  const hasRussian = /[\u0400-\u04FF]/.test(text);
  const hasEnglish = /[A-Za-z]/.test(text);
  
  // If we already have proper Unicode characters, but also have encoding issues
  if (hasGeorgian && hasSylfaenGeorgianPatterns(text)) return 'georgian';
  if (hasGeorgian && !hasRussian && !hasSylfaenGeorgianPatterns(text)) return 'georgian';
  if (hasRussian && !hasGeorgian) return 'russian';
  if (hasEnglish && !hasGeorgian && !hasRussian) return 'english';
  if ((hasGeorgian || hasRussian) && hasEnglish) return 'mixed';
  
  // Check for encoding issues - look for Latin characters that might be encoded text
  const hasEncodedText = /[√Ä-√ø]/.test(text);
  if (!hasEncodedText) return 'english'; // Likely clean English text
  
  // Enhanced pattern analysis for Georgian (including Sylfaen patterns)
  const georgianPatterns = [
    /·É£[√§√∂√º√Ñ√ñ√ú]/g, // Georgian ·É£ with Sylfaen diacritics
    /[·Éê-·É∞][√Ä-√ø]/g, // Georgian + Latin extended (Sylfaen mix)
    /√à√Å√â√ã√â√ì√â/g, // Medical document pattern
    /√Ä√å√Ñ√Ä√ç√è/g, // "·Éê·Éõ·Éì·Éê·Éú·Éù" pattern
    /√Ç√â√ç√Ñ√ä√è√ã√è√Ç√â/g, // "·Éí·Éò·Éú·Éî·Éô·Éù·Éö·Éù·Éí·Éò" pattern  
    /√É√Ñ√ê√Ä√í√î√Ä√å√Ñ√ç√î√â/g, // "·Éì·Éî·Éû·Éê·É†·É¢·Éê·Éõ·Éî·Éú·É¢·Éò" pattern
    /√ì√Ä√ò√Ä√í√à√Ö√Ñ√ã√è/g, // "·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù" pattern
    /[√Ä√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú√ù√û√ü]/g // Georgian-like uppercase
  ];
  
  // Russian pattern indicators
  const russianPatterns = [
    /[√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø]/g, // Russian-like lowercase
    /√ê√é√ë√ë√à√â√ë√ä√Ä≈∏/g, // "–†–û–°–°–ò–ô–°–ö–ê–Ø" pattern
    /√î√Ö√Ñ√Ö√ê√Ä√ñ√à≈∏/g, // "–§–ï–î–ï–†–ê–¶–ò–Ø" pattern
    /√é√Å√ã√Ä√ë√í√ú/g // "–û–ë–õ–ê–°–¢–¨" pattern
  ];
  
  const georgianMatches = georgianPatterns.reduce((sum, pattern) => sum + (text.match(pattern) || []).length, 0);
  const russianMatches = russianPatterns.reduce((sum, pattern) => sum + (text.match(pattern) || []).length, 0);
  
  // Special handling for medical documents (often Georgian with Sylfaen encoding)
  if (hasSylfaenGeorgianPatterns(text)) return 'georgian';
  
  if (georgianMatches > russianMatches && georgianMatches > 0) return 'georgian';
  if (russianMatches > georgianMatches && russianMatches > 0) return 'russian';
  if (georgianMatches > 0 && russianMatches > 0) return 'mixed';
  
  // Default fallback - if we can't determine, assume it needs Georgian mapping
  // (since this was the original issue and medical documents are often Georgian)
  return hasEncodedText ? 'georgian' : 'english';
}

/**
 * Check if a file is a PDF
 */
export function isPdfFile(file: File): boolean {
  return file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf');
}

/**
 * Get estimated token count for text (rough approximation)
 * Useful for checking if text will fit within API limits
 */
export function estimateTokenCount(text: string): number {
  // Rough approximation: 1 token ‚âà 4 characters for most languages
  // Georgian text might be slightly different, but this gives a good estimate
  return Math.ceil(text.length / 4);
}

/**
 * Truncate text to fit within token limits if needed
 */
export function truncateTextForTokenLimit(text: string, maxTokens: number = 25000): string {
  const estimatedTokens = estimateTokenCount(text);
  
  if (estimatedTokens <= maxTokens) {
    return text;
  }
  
  // Calculate how much text to keep (leave some buffer)
  const maxChars = Math.floor(maxTokens * 3.5); // Conservative estimate
  const truncatedText = text.substring(0, maxChars);
  
  console.log('‚úÇÔ∏è Text truncated to fit token limits:', {
    originalLength: text.length,
    truncatedLength: truncatedText.length,
    estimatedOriginalTokens: estimatedTokens,
    maxTokens
  });
  
  return truncatedText + '\n\n[Text truncated to fit token limits...]';
} 